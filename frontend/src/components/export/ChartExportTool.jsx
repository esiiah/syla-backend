// frontend/src/components/export/ChartExportTool.jsx
import React, { useState, useEffect, useRef } from "react";
import { X, Download, FileImage, FileText, Settings, Check } from "lucide-react";

export default function ChartExportTool({ 
  onClose,
  onExportImage, 
  onExportCSV, 
  onExportJSON, 
  chartData = null,
  chartTitle = "Chart",
  chartId = null
}) {
  const [exportConfig, setExportConfig] = useState({
    format: "png",
    background: "#ffffff", // Default to white as per specification
    dpi: 300,
    filename: "",
    includeMetadata: false,
    includeWatermark: false,
    watermarkText: "Generated by Syla Analytics"
  });

  const [isExporting, setIsExporting] = useState(false);
  const [exportStatus, setExportStatus] = useState(null);
  const [dragPosition, setDragPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [isInitialized, setIsInitialized] = useState(false);
  const panelRef = useRef(null);

  // Initialize position to right side center
  useEffect(() => {
    if (!isInitialized && panelRef.current) {
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const panelWidth = panelRef.current.offsetWidth;
      const panelHeight = panelRef.current.offsetHeight;
      
      // Position on the right side, vertically centered
      const rightMargin = 20; // 20px from right edge
      const x = viewportWidth - panelWidth - rightMargin;
      const y = (viewportHeight - panelHeight) / 2;
      
      setDragPosition({ x, y });
      setIsInitialized(true);
    }
  }, [isInitialized]);

  // Set default filename based on chart title
  useEffect(() => {
    if (!exportConfig.filename) {
      const timestamp = new Date().toISOString().slice(0, 16).replace(/[:-]/g, '');
      const cleanTitle = (chartTitle || "chart").replace(/[^a-zA-Z0-9]/g, '_');
      setExportConfig(prev => ({
        ...prev,
        filename: `${cleanTitle}_${timestamp}`
      }));
    }
  }, [chartTitle, exportConfig.filename]);

  // Drag functionality for floating panel
  const handleMouseDown = (e) => {
    if (e.target.closest('.drag-handle')) {
      setIsDragging(true);
      const rect = panelRef.current.getBoundingClientRect();
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      });
      e.preventDefault();
    }
  };

  const handleMouseMove = (e) => {
    if (isDragging && panelRef.current) {
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const panelWidth = panelRef.current.offsetWidth;
      const panelHeight = panelRef.current.offsetHeight;
      
      const newX = Math.max(0, Math.min(viewportWidth - panelWidth, e.clientX - dragOffset.x));
      const newY = Math.max(0, Math.min(viewportHeight - panelHeight, e.clientY - dragOffset.y));
      
      setDragPosition({ x: newX, y: newY });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.body.style.userSelect = 'none';
    } else {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.userSelect = '';
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.userSelect = '';
    };
  }, [isDragging, dragOffset]);

  const updateConfig = (key, value) => {
    setExportConfig(prev => ({ ...prev, [key]: value }));
  };

  const handleExport = async () => {
    try {
      setIsExporting(true);
      setExportStatus({ type: 'loading', message: 'Preparing export...' });

      const { format, background, dpi, filename, includeMetadata } = exportConfig;
      
      // Generate final filename with extension
      const finalFilename = filename.includes('.') ? filename : `${filename}.${format}`;

      if (format === "csv") {
        // Export data as CSV
        if (onExportCSV) {
          await onExportCSV();
          setExportStatus({ 
            type: 'success', 
            message: 'CSV data exported successfully!',
            action: 'download'
          });
        }
      } else if (format === "json") {
        // Export data as JSON
        if (onExportJSON) {
          await onExportJSON();
          setExportStatus({ 
            type: 'success', 
            message: 'JSON data exported successfully!',
            action: 'download'
          });
        }
      } else {
        // Export as image format
        if (onExportImage) {
          // For image exports, we need to ensure white background is applied
          const imageExportConfig = {
            format,
            background: background || "#ffffff", // Force white if not set
            dpi,
            filename: finalFilename,
            includeMetadata,
            includeWatermark: exportConfig.includeWatermark,
            watermarkText: exportConfig.watermarkText
          };

          await onExportImage(format, imageExportConfig);
          
          setExportStatus({ 
            type: 'success', 
            message: `${format.toUpperCase()} exported successfully!`,
            action: 'download'
          });
        }
      }

      // Auto-close success message after 3 seconds
      setTimeout(() => {
        setExportStatus(null);
      }, 3000);

    } catch (error) {
      console.error('Export failed:', error);
      setExportStatus({ 
        type: 'error', 
        message: error.message || 'Export failed. Please try again.' 
      });
      
      // Auto-hide error after 5 seconds
      setTimeout(() => {
        setExportStatus(null);
      }, 5000);
    } finally {
      setIsExporting(false);
    }
  };

  const backgroundOptions = [
    { value: "#ffffff", label: "White (Recommended)", preview: "#ffffff" },
    { value: "transparent", label: "Transparent", preview: "linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)" },
    { value: "#f8fafc", label: "Light Gray", preview: "#f8fafc" },
    { value: "#000000", label: "Black", preview: "#000000" }
  ];

    return (
      // No fullscreen overlay, just the floating draggable panel
      <div
        ref={panelRef}
        className="bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-gray-200 dark:border-slate-600 w-80 max-h-[85vh] overflow-hidden z-50"
        style={{
          position: "fixed",
          left: `${dragPosition.x}px`,
          top: `${dragPosition.y}px`,
          transform: isDragging ? "scale(1.02)" : "scale(1)",
          transition: isDragging ? "none" : "transform 0.2s ease-out",
          opacity: isInitialized ? 1 : 0
        }}
        onMouseDown={handleMouseDown}
      >
        {/* Header */}
        <div className="drag-handle p-3 border-b border-gray-200 dark:border-slate-600 cursor-move bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-1.5 bg-blue-100 dark:bg-blue-900/40 rounded-lg">
                <Download size={16} className="text-blue-600 dark:text-blue-400" />
              </div>
              <div>
                <h3 className="font-semibold text-sm text-gray-800 dark:text-slate-200">
                  Export Chart
                </h3>
                <p className="text-xs text-gray-500 dark:text-slate-400">
                  High-quality export
                </p>
              </div>
            </div>

            <button
              onClick={onClose}
              className="p-1.5 hover:bg-gray-100 dark:hover:bg-slate-700 rounded-lg transition-colors"
            >
              <X size={16} className="text-gray-500" />
            </button>
          </div>
        </div>

        {/* Export Configuration */}
        <div className="p-3 max-h-80 overflow-y-auto">
          {/* Format Selection */}
          <div className="mb-3">
            <label className="block text-xs font-medium text-gray-700 dark:text-slate-300 mb-2">
              Export Format
            </label>
            <div className="grid grid-cols-2 gap-1.5">
              {[
                { value: "png", label: "PNG", desc: "High quality", icon: FileImage },
                { value: "jpeg", label: "JPEG", desc: "Compressed", icon: FileImage },
                { value: "svg", label: "SVG", desc: "Vector", icon: FileImage },
                { value: "pdf", label: "PDF", desc: "Print ready", icon: FileText },
                { value: "csv", label: "CSV", desc: "Raw data", icon: FileText },
                { value: "json", label: "JSON", desc: "Structured", icon: FileText }
              ].map(format => (
                <button
                  key={format.value}
                  onClick={() => updateConfig('format', format.value)}
                  className={`p-2 rounded-lg border-2 text-left transition-all ${
                    exportConfig.format === format.value
                      ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300"
                      : "border-gray-200 dark:border-slate-600 hover:border-gray-300 dark:hover:border-slate-500"
                  }`}
                >
                  <div className="flex items-center gap-1.5 mb-1">
                    <format.icon size={14} />
                    <span className="font-medium text-xs">{format.label}</span>
                  </div>
                  <div className="text-xs text-gray-500 dark:text-slate-400">
                    {format.desc}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Image-specific options */}
          {["png", "jpeg", "svg", "pdf"].includes(exportConfig.format) && (
            <>
              {/* Background Color */}
              <div className="mb-3">
                <label className="block text-xs font-medium text-gray-700 dark:text-slate-300 mb-2">
                  Background
                </label>
                <div className="grid grid-cols-1 gap-1.5">
                  {backgroundOptions.map(bg => (
                    <button
                      key={bg.value}
                      onClick={() => updateConfig('background', bg.value)}
                      className={`p-2 rounded-lg border-2 text-left transition-all flex items-center gap-2 ${
                        exportConfig.background === bg.value
                          ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                          : "border-gray-200 dark:border-slate-600 hover:border-gray-300 dark:hover:border-slate-500"
                      }`}
                    >
                      <div 
                        className="w-6 h-6 rounded border border-gray-300 flex-shrink-0"
                        style={{ 
                          background: bg.value === "transparent" ? bg.preview : bg.value,
                          backgroundSize: bg.value === "transparent" ? "6px 6px" : undefined
                        }}
                      />
                      <div className="flex-1">
                        <div className="font-medium text-xs">{bg.label}</div>
                        {bg.value === "#ffffff" && (
                          <div className="text-xs text-green-600 dark:text-green-400">
                            Recommended
                          </div>
                        )}
                      </div>
                      {exportConfig.background === bg.value && (
                        <Check size={14} className="text-blue-600 dark:text-blue-400" />
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* DPI/Resolution */}
              {["png", "jpeg", "pdf"].includes(exportConfig.format) && (
                <div className="mb-3">
                  <label className="block text-xs font-medium text-gray-700 dark:text-slate-300 mb-2">
                    Resolution (DPI)
                  </label>
                  <div className="flex gap-1.5">
                    {[72, 150, 300, 600].map(dpi => (
                      <button
                        key={dpi}
                        onClick={() => updateConfig('dpi', dpi)}
                        className={`px-2 py-1.5 rounded-lg text-xs font-medium transition-all flex-1 ${
                          exportConfig.dpi === dpi
                            ? "bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300"
                            : "bg-gray-100 hover:bg-gray-200 dark:bg-slate-700 dark:hover:bg-slate-600"
                        }`}
                      >
                        {dpi}
                      </button>
                    ))}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    300 DPI recommended for print
                  </p>
                </div>
              )}
            </>
          )}

          {/* Filename */}
          <div className="mb-3">
            <label className="block text-xs font-medium text-gray-700 dark:text-slate-300 mb-2">
              Filename
            </label>
            <input
              type="text"
              value={exportConfig.filename}
              onChange={(e) => updateConfig('filename', e.target.value)}
              placeholder="chart_export"
              className="w-full rounded-lg border border-gray-300 dark:border-slate-600 px-2 py-1.5 text-xs focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700"
            />
          </div>

          {/* Additional Options */}
          <div className="space-y-2">
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={exportConfig.includeMetadata}
                onChange={(e) => updateConfig('includeMetadata', e.target.checked)}
                className="rounded w-3 h-3"
              />
              <span className="text-xs">Include metadata file</span>
            </label>

            {["png", "jpeg", "pdf"].includes(exportConfig.format) && (
              <>
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={exportConfig.includeWatermark}
                    onChange={(e) => updateConfig('includeWatermark', e.target.checked)}
                    className="rounded w-3 h-3"
                  />
                  <span className="text-xs">Add watermark</span>
                </label>

                {exportConfig.includeWatermark && (
                  <input
                    type="text"
                    value={exportConfig.watermarkText}
                    onChange={(e) => updateConfig('watermarkText', e.target.value)}
                    placeholder="Watermark text"
                    className="w-full ml-5 rounded border border-gray-300 dark:border-slate-600 px-2 py-1 text-xs dark:bg-slate-700"
                  />
                )}
              </>
            )}
          </div>
        </div>

        {/* Status Messages */}
        {exportStatus && (
          <div className={`mx-3 mb-3 p-2.5 rounded-lg border ${
            exportStatus.type === 'success' 
              ? 'bg-green-50 border-green-200 text-green-800 dark:bg-green-900/20 dark:border-green-700 dark:text-green-300'
              : exportStatus.type === 'error'
              ? 'bg-red-50 border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-700 dark:text-red-300'
              : 'bg-blue-50 border-blue-200 text-blue-800 dark:bg-blue-900/20 dark:border-blue-700 dark:text-blue-300'
          }`}>
            <div className="flex items-center gap-2">
              {exportStatus.type === 'success' && <Check size={14} />}
              {exportStatus.type === 'loading' && (
                <div className="w-3 h-3 border-2 border-current border-t-transparent rounded-full animate-spin" />
              )}
              <span className="text-xs font-medium">{exportStatus.message}</span>
            </div>
            {exportStatus.action === 'download' && (
              <p className="text-xs mt-1 opacity-75">
                Check your downloads folder.
              </p>
            )}
          </div>
        )}

        {/* Action Buttons */}
        <div className="p-3 border-t border-gray-200 dark:border-slate-600 bg-gray-50 dark:bg-slate-800/50">
          <div className="flex gap-2">
            <button
              onClick={handleExport}
              disabled={isExporting || !exportConfig.filename.trim()}
              className={`flex-1 px-3 py-2 rounded-lg font-medium text-white text-sm transition-all ${
                isExporting || !exportConfig.filename.trim()
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-md hover:shadow-lg"
              }`}
            >
              {isExporting ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  Exporting...
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <Download size={14} />
                  Export
                </div>
              )}
            </button>
            
            <button
              onClick={onClose}
              className="px-3 py-2 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors text-sm"
            >
              Cancel
            </button>
          </div>

          {/* Export info */}
          <div className="mt-2 text-xs text-gray-500 dark:text-slate-400 text-center">
            <div className="flex items-center justify-center gap-3">
              <span>{exportConfig.format.toUpperCase()}</span>
              {["png", "jpeg", "pdf"].includes(exportConfig.format) && (
                <span>{exportConfig.dpi} DPI</span>
              )}
              <span>{exportConfig.background === "#ffffff" ? "White BG" : "Custom BG"}</span>
            </div>
          </div>
        </div>
      </div>
  );
}
